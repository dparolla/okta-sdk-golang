/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// FeatureLifecycle the model 'FeatureLifecycle'
type FeatureLifecycle string

// List of FeatureLifecycle
const (
	FEATURELIFECYCLE_DISABLE FeatureLifecycle = "DISABLE"
	FEATURELIFECYCLE_ENABLE  FeatureLifecycle = "ENABLE"
)

// All allowed values of FeatureLifecycle enum
var AllowedFeatureLifecycleEnumValues = []FeatureLifecycle{
	"DISABLE",
	"ENABLE",
}

func (v *FeatureLifecycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeatureLifecycle(value)
	for _, existing := range AllowedFeatureLifecycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeatureLifecycle", value)
}

// NewFeatureLifecycleFromValue returns a pointer to a valid FeatureLifecycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeatureLifecycleFromValue(v string) (*FeatureLifecycle, error) {
	ev := FeatureLifecycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeatureLifecycle: valid values are %v", v, AllowedFeatureLifecycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeatureLifecycle) IsValid() bool {
	for _, existing := range AllowedFeatureLifecycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeatureLifecycle value
func (v FeatureLifecycle) Ptr() *FeatureLifecycle {
	return &v
}

type NullableFeatureLifecycle struct {
	value *FeatureLifecycle
	isSet bool
}

func (v NullableFeatureLifecycle) Get() *FeatureLifecycle {
	return v.value
}

func (v *NullableFeatureLifecycle) Set(val *FeatureLifecycle) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureLifecycle) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureLifecycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureLifecycle(val *FeatureLifecycle) *NullableFeatureLifecycle {
	return &NullableFeatureLifecycle{value: val, isSet: true}
}

func (v NullableFeatureLifecycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureLifecycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
