/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserFactorResultType Result of a Factor verification attempt
type UserFactorResultType string

// List of UserFactorResultType
const (
	USERFACTORRESULTTYPE_CANCELLED            UserFactorResultType = "CANCELLED"
	USERFACTORRESULTTYPE_CHALLENGE            UserFactorResultType = "CHALLENGE"
	USERFACTORRESULTTYPE_ERROR                UserFactorResultType = "ERROR"
	USERFACTORRESULTTYPE_FAILED               UserFactorResultType = "FAILED"
	USERFACTORRESULTTYPE_PASSCODE_REPLAYED    UserFactorResultType = "PASSCODE_REPLAYED"
	USERFACTORRESULTTYPE_REJECTED             UserFactorResultType = "REJECTED"
	USERFACTORRESULTTYPE_SUCCESS              UserFactorResultType = "SUCCESS"
	USERFACTORRESULTTYPE_TIMEOUT              UserFactorResultType = "TIMEOUT"
	USERFACTORRESULTTYPE_TIME_WINDOW_EXCEEDED UserFactorResultType = "TIME_WINDOW_EXCEEDED"
	USERFACTORRESULTTYPE_WAITING              UserFactorResultType = "WAITING"
)

// All allowed values of UserFactorResultType enum
var AllowedUserFactorResultTypeEnumValues = []UserFactorResultType{
	"CANCELLED",
	"CHALLENGE",
	"ERROR",
	"FAILED",
	"PASSCODE_REPLAYED",
	"REJECTED",
	"SUCCESS",
	"TIMEOUT",
	"TIME_WINDOW_EXCEEDED",
	"WAITING",
}

func (v *UserFactorResultType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserFactorResultType(value)
	for _, existing := range AllowedUserFactorResultTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserFactorResultType", value)
}

// NewUserFactorResultTypeFromValue returns a pointer to a valid UserFactorResultType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserFactorResultTypeFromValue(v string) (*UserFactorResultType, error) {
	ev := UserFactorResultType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserFactorResultType: valid values are %v", v, AllowedUserFactorResultTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserFactorResultType) IsValid() bool {
	for _, existing := range AllowedUserFactorResultTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserFactorResultType value
func (v UserFactorResultType) Ptr() *UserFactorResultType {
	return &v
}

type NullableUserFactorResultType struct {
	value *UserFactorResultType
	isSet bool
}

func (v NullableUserFactorResultType) Get() *UserFactorResultType {
	return v.value
}

func (v *NullableUserFactorResultType) Set(val *UserFactorResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorResultType(val *UserFactorResultType) *NullableUserFactorResultType {
	return &NullableUserFactorResultType{value: val, isSet: true}
}

func (v NullableUserFactorResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
