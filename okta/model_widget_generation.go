/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// WidgetGeneration the model 'WidgetGeneration'
type WidgetGeneration string

// List of WidgetGeneration
const (
	WIDGETGENERATION_G2 WidgetGeneration = "G2"
	WIDGETGENERATION_G3 WidgetGeneration = "G3"
)

// All allowed values of WidgetGeneration enum
var AllowedWidgetGenerationEnumValues = []WidgetGeneration{
	"G2",
	"G3",
}

func (v *WidgetGeneration) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetGeneration(value)
	for _, existing := range AllowedWidgetGenerationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetGeneration", value)
}

// NewWidgetGenerationFromValue returns a pointer to a valid WidgetGeneration
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWidgetGenerationFromValue(v string) (*WidgetGeneration, error) {
	ev := WidgetGeneration(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WidgetGeneration: valid values are %v", v, AllowedWidgetGenerationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WidgetGeneration) IsValid() bool {
	for _, existing := range AllowedWidgetGenerationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WidgetGeneration value
func (v WidgetGeneration) Ptr() *WidgetGeneration {
	return &v
}

type NullableWidgetGeneration struct {
	value *WidgetGeneration
	isSet bool
}

func (v NullableWidgetGeneration) Get() *WidgetGeneration {
	return v.value
}

func (v *NullableWidgetGeneration) Set(val *WidgetGeneration) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetGeneration) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetGeneration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetGeneration(val *WidgetGeneration) *NullableWidgetGeneration {
	return &NullableWidgetGeneration{value: val, isSet: true}
}

func (v NullableWidgetGeneration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetGeneration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
