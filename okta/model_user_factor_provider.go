/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserFactorProvider Provider for the Factor
type UserFactorProvider string

// List of UserFactorProvider
const (
	USERFACTORPROVIDER_CUSTOM   UserFactorProvider = "CUSTOM"
	USERFACTORPROVIDER_DUO      UserFactorProvider = "DUO"
	USERFACTORPROVIDER_FIDO     UserFactorProvider = "FIDO"
	USERFACTORPROVIDER_GOOGLE   UserFactorProvider = "GOOGLE"
	USERFACTORPROVIDER_OKTA     UserFactorProvider = "OKTA"
	USERFACTORPROVIDER_RSA      UserFactorProvider = "RSA"
	USERFACTORPROVIDER_SYMANTEC UserFactorProvider = "SYMANTEC"
	USERFACTORPROVIDER_YUBICO   UserFactorProvider = "YUBICO"
)

// All allowed values of UserFactorProvider enum
var AllowedUserFactorProviderEnumValues = []UserFactorProvider{
	"CUSTOM",
	"DUO",
	"FIDO",
	"GOOGLE",
	"OKTA",
	"RSA",
	"SYMANTEC",
	"YUBICO",
}

func (v *UserFactorProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserFactorProvider(value)
	for _, existing := range AllowedUserFactorProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserFactorProvider", value)
}

// NewUserFactorProviderFromValue returns a pointer to a valid UserFactorProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserFactorProviderFromValue(v string) (*UserFactorProvider, error) {
	ev := UserFactorProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserFactorProvider: valid values are %v", v, AllowedUserFactorProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserFactorProvider) IsValid() bool {
	for _, existing := range AllowedUserFactorProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserFactorProvider value
func (v UserFactorProvider) Ptr() *UserFactorProvider {
	return &v
}

type NullableUserFactorProvider struct {
	value *UserFactorProvider
	isSet bool
}

func (v NullableUserFactorProvider) Get() *UserFactorProvider {
	return v.value
}

func (v *NullableUserFactorProvider) Set(val *UserFactorProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorProvider(val *UserFactorProvider) *NullableUserFactorProvider {
	return &NullableUserFactorProvider{value: val, isSet: true}
}

func (v NullableUserFactorProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
