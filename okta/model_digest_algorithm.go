/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DigestAlgorithm Algorithm used to generate the key. Only required for the PBKDF2 algorithm.
type DigestAlgorithm string

// List of DigestAlgorithm
const (
	DIGESTALGORITHM_SHA256_HMAC DigestAlgorithm = "SHA256_HMAC"
	DIGESTALGORITHM_SHA512_HMAC DigestAlgorithm = "SHA512_HMAC"
)

// All allowed values of DigestAlgorithm enum
var AllowedDigestAlgorithmEnumValues = []DigestAlgorithm{
	"SHA256_HMAC",
	"SHA512_HMAC",
}

func (v *DigestAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DigestAlgorithm(value)
	for _, existing := range AllowedDigestAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DigestAlgorithm", value)
}

// NewDigestAlgorithmFromValue returns a pointer to a valid DigestAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDigestAlgorithmFromValue(v string) (*DigestAlgorithm, error) {
	ev := DigestAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DigestAlgorithm: valid values are %v", v, AllowedDigestAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DigestAlgorithm) IsValid() bool {
	for _, existing := range AllowedDigestAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DigestAlgorithm value
func (v DigestAlgorithm) Ptr() *DigestAlgorithm {
	return &v
}

type NullableDigestAlgorithm struct {
	value *DigestAlgorithm
	isSet bool
}

func (v NullableDigestAlgorithm) Get() *DigestAlgorithm {
	return v.value
}

func (v *NullableDigestAlgorithm) Set(val *DigestAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableDigestAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableDigestAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigestAlgorithm(val *DigestAlgorithm) *NullableDigestAlgorithm {
	return &NullableDigestAlgorithm{value: val, isSet: true}
}

func (v NullableDigestAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigestAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
