/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthenticatorMethodProperty the model 'AuthenticatorMethodProperty'
type AuthenticatorMethodProperty string

// List of AuthenticatorMethodProperty
const (
	AUTHENTICATORMETHODPROPERTY_DEVICE_BOUND       AuthenticatorMethodProperty = "DEVICE_BOUND"
	AUTHENTICATORMETHODPROPERTY_HARDWARE_PROTECTED AuthenticatorMethodProperty = "HARDWARE_PROTECTED"
	AUTHENTICATORMETHODPROPERTY_PHISHING_RESISTANT AuthenticatorMethodProperty = "PHISHING_RESISTANT"
	AUTHENTICATORMETHODPROPERTY_USER_PRESENCE      AuthenticatorMethodProperty = "USER_PRESENCE"
	AUTHENTICATORMETHODPROPERTY_USER_VERIFYING     AuthenticatorMethodProperty = "USER_VERIFYING"
)

// All allowed values of AuthenticatorMethodProperty enum
var AllowedAuthenticatorMethodPropertyEnumValues = []AuthenticatorMethodProperty{
	"DEVICE_BOUND",
	"HARDWARE_PROTECTED",
	"PHISHING_RESISTANT",
	"USER_PRESENCE",
	"USER_VERIFYING",
}

func (v *AuthenticatorMethodProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticatorMethodProperty(value)
	for _, existing := range AllowedAuthenticatorMethodPropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticatorMethodProperty", value)
}

// NewAuthenticatorMethodPropertyFromValue returns a pointer to a valid AuthenticatorMethodProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticatorMethodPropertyFromValue(v string) (*AuthenticatorMethodProperty, error) {
	ev := AuthenticatorMethodProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticatorMethodProperty: valid values are %v", v, AllowedAuthenticatorMethodPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticatorMethodProperty) IsValid() bool {
	for _, existing := range AllowedAuthenticatorMethodPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticatorMethodProperty value
func (v AuthenticatorMethodProperty) Ptr() *AuthenticatorMethodProperty {
	return &v
}

type NullableAuthenticatorMethodProperty struct {
	value *AuthenticatorMethodProperty
	isSet bool
}

func (v NullableAuthenticatorMethodProperty) Get() *AuthenticatorMethodProperty {
	return v.value
}

func (v *NullableAuthenticatorMethodProperty) Set(val *AuthenticatorMethodProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorMethodProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorMethodProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorMethodProperty(val *AuthenticatorMethodProperty) *NullableAuthenticatorMethodProperty {
	return &NullableAuthenticatorMethodProperty{value: val, isSet: true}
}

func (v NullableAuthenticatorMethodProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorMethodProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
