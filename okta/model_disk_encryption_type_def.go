/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DiskEncryptionTypeDef Type of encryption used on the device > **Note:** The following values map to Disk Encryption ON: `FULL`, `USER`, `ALL_INTERNAL_VOLUMES`. All other values map to Disk Encryption OFF.
type DiskEncryptionTypeDef string

// List of DiskEncryptionTypeDef
const (
	DISKENCRYPTIONTYPEDEF_ALL_INTERNAL_VOLUMES DiskEncryptionTypeDef = "ALL_INTERNAL_VOLUMES"
	DISKENCRYPTIONTYPEDEF_FULL                 DiskEncryptionTypeDef = "FULL"
	DISKENCRYPTIONTYPEDEF_NONE                 DiskEncryptionTypeDef = "NONE"
	DISKENCRYPTIONTYPEDEF_SYSTEM_VOLUME        DiskEncryptionTypeDef = "SYSTEM_VOLUME"
	DISKENCRYPTIONTYPEDEF_USER                 DiskEncryptionTypeDef = "USER"
)

// All allowed values of DiskEncryptionTypeDef enum
var AllowedDiskEncryptionTypeDefEnumValues = []DiskEncryptionTypeDef{
	"ALL_INTERNAL_VOLUMES",
	"FULL",
	"NONE",
	"SYSTEM_VOLUME",
	"USER",
}

func (v *DiskEncryptionTypeDef) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskEncryptionTypeDef(value)
	for _, existing := range AllowedDiskEncryptionTypeDefEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskEncryptionTypeDef", value)
}

// NewDiskEncryptionTypeDefFromValue returns a pointer to a valid DiskEncryptionTypeDef
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskEncryptionTypeDefFromValue(v string) (*DiskEncryptionTypeDef, error) {
	ev := DiskEncryptionTypeDef(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskEncryptionTypeDef: valid values are %v", v, AllowedDiskEncryptionTypeDefEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskEncryptionTypeDef) IsValid() bool {
	for _, existing := range AllowedDiskEncryptionTypeDefEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiskEncryptionTypeDef value
func (v DiskEncryptionTypeDef) Ptr() *DiskEncryptionTypeDef {
	return &v
}

type NullableDiskEncryptionTypeDef struct {
	value *DiskEncryptionTypeDef
	isSet bool
}

func (v NullableDiskEncryptionTypeDef) Get() *DiskEncryptionTypeDef {
	return v.value
}

func (v *NullableDiskEncryptionTypeDef) Set(val *DiskEncryptionTypeDef) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskEncryptionTypeDef) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskEncryptionTypeDef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskEncryptionTypeDef(val *DiskEncryptionTypeDef) *NullableDiskEncryptionTypeDef {
	return &NullableDiskEncryptionTypeDef{value: val, isSet: true}
}

func (v NullableDiskEncryptionTypeDef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskEncryptionTypeDef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
