/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OtpTotpAlgorithm HMAC algorithm
type OtpTotpAlgorithm string

// List of OtpTotpAlgorithm
const (
	OTPTOTPALGORITHM_H_MAC_SHA1   OtpTotpAlgorithm = "HMacSHA1"
	OTPTOTPALGORITHM_H_MAC_SHA256 OtpTotpAlgorithm = "HMacSHA256"
	OTPTOTPALGORITHM_H_MAC_SHA512 OtpTotpAlgorithm = "HMacSHA512"
)

// All allowed values of OtpTotpAlgorithm enum
var AllowedOtpTotpAlgorithmEnumValues = []OtpTotpAlgorithm{
	"HMacSHA1",
	"HMacSHA256",
	"HMacSHA512",
}

func (v *OtpTotpAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OtpTotpAlgorithm(value)
	for _, existing := range AllowedOtpTotpAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OtpTotpAlgorithm", value)
}

// NewOtpTotpAlgorithmFromValue returns a pointer to a valid OtpTotpAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOtpTotpAlgorithmFromValue(v string) (*OtpTotpAlgorithm, error) {
	ev := OtpTotpAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OtpTotpAlgorithm: valid values are %v", v, AllowedOtpTotpAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OtpTotpAlgorithm) IsValid() bool {
	for _, existing := range AllowedOtpTotpAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OtpTotpAlgorithm value
func (v OtpTotpAlgorithm) Ptr() *OtpTotpAlgorithm {
	return &v
}

type NullableOtpTotpAlgorithm struct {
	value *OtpTotpAlgorithm
	isSet bool
}

func (v NullableOtpTotpAlgorithm) Get() *OtpTotpAlgorithm {
	return v.value
}

func (v *NullableOtpTotpAlgorithm) Set(val *OtpTotpAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableOtpTotpAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableOtpTotpAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtpTotpAlgorithm(val *OtpTotpAlgorithm) *NullableOtpTotpAlgorithm {
	return &NullableOtpTotpAlgorithm{value: val, isSet: true}
}

func (v NullableOtpTotpAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtpTotpAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
