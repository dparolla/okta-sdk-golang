/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// SafeBrowsingProtectionLevel Represents the current value of the Safe Browsing protection level
type SafeBrowsingProtectionLevel string

// List of SafeBrowsingProtectionLevel
const (
	SAFEBROWSINGPROTECTIONLEVEL_ENHANCED_PROTECTION SafeBrowsingProtectionLevel = "ENHANCED_PROTECTION"
	SAFEBROWSINGPROTECTIONLEVEL_NO_SAFE_BROWSING    SafeBrowsingProtectionLevel = "NO_SAFE_BROWSING"
	SAFEBROWSINGPROTECTIONLEVEL_STANDARD_PROTECTION SafeBrowsingProtectionLevel = "STANDARD_PROTECTION"
)

// All allowed values of SafeBrowsingProtectionLevel enum
var AllowedSafeBrowsingProtectionLevelEnumValues = []SafeBrowsingProtectionLevel{
	"ENHANCED_PROTECTION",
	"NO_SAFE_BROWSING",
	"STANDARD_PROTECTION",
}

func (v *SafeBrowsingProtectionLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SafeBrowsingProtectionLevel(value)
	for _, existing := range AllowedSafeBrowsingProtectionLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SafeBrowsingProtectionLevel", value)
}

// NewSafeBrowsingProtectionLevelFromValue returns a pointer to a valid SafeBrowsingProtectionLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSafeBrowsingProtectionLevelFromValue(v string) (*SafeBrowsingProtectionLevel, error) {
	ev := SafeBrowsingProtectionLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SafeBrowsingProtectionLevel: valid values are %v", v, AllowedSafeBrowsingProtectionLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SafeBrowsingProtectionLevel) IsValid() bool {
	for _, existing := range AllowedSafeBrowsingProtectionLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SafeBrowsingProtectionLevel value
func (v SafeBrowsingProtectionLevel) Ptr() *SafeBrowsingProtectionLevel {
	return &v
}

type NullableSafeBrowsingProtectionLevel struct {
	value *SafeBrowsingProtectionLevel
	isSet bool
}

func (v NullableSafeBrowsingProtectionLevel) Get() *SafeBrowsingProtectionLevel {
	return v.value
}

func (v *NullableSafeBrowsingProtectionLevel) Set(val *SafeBrowsingProtectionLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeBrowsingProtectionLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeBrowsingProtectionLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeBrowsingProtectionLevel(val *SafeBrowsingProtectionLevel) *NullableSafeBrowsingProtectionLevel {
	return &NullableSafeBrowsingProtectionLevel{value: val, isSet: true}
}

func (v NullableSafeBrowsingProtectionLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeBrowsingProtectionLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
