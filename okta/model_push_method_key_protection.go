/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PushMethodKeyProtection the model 'PushMethodKeyProtection'
type PushMethodKeyProtection string

// List of PushMethodKeyProtection
const (
	PUSHMETHODKEYPROTECTION_ANY      PushMethodKeyProtection = "ANY"
	PUSHMETHODKEYPROTECTION_HARDWARE PushMethodKeyProtection = "HARDWARE"
)

// All allowed values of PushMethodKeyProtection enum
var AllowedPushMethodKeyProtectionEnumValues = []PushMethodKeyProtection{
	"ANY",
	"HARDWARE",
}

func (v *PushMethodKeyProtection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PushMethodKeyProtection(value)
	for _, existing := range AllowedPushMethodKeyProtectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PushMethodKeyProtection", value)
}

// NewPushMethodKeyProtectionFromValue returns a pointer to a valid PushMethodKeyProtection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPushMethodKeyProtectionFromValue(v string) (*PushMethodKeyProtection, error) {
	ev := PushMethodKeyProtection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PushMethodKeyProtection: valid values are %v", v, AllowedPushMethodKeyProtectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PushMethodKeyProtection) IsValid() bool {
	for _, existing := range AllowedPushMethodKeyProtectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PushMethodKeyProtection value
func (v PushMethodKeyProtection) Ptr() *PushMethodKeyProtection {
	return &v
}

type NullablePushMethodKeyProtection struct {
	value *PushMethodKeyProtection
	isSet bool
}

func (v NullablePushMethodKeyProtection) Get() *PushMethodKeyProtection {
	return v.value
}

func (v *NullablePushMethodKeyProtection) Set(val *PushMethodKeyProtection) {
	v.value = val
	v.isSet = true
}

func (v NullablePushMethodKeyProtection) IsSet() bool {
	return v.isSet
}

func (v *NullablePushMethodKeyProtection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushMethodKeyProtection(val *PushMethodKeyProtection) *NullablePushMethodKeyProtection {
	return &NullablePushMethodKeyProtection{value: val, isSet: true}
}

func (v NullablePushMethodKeyProtection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushMethodKeyProtection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
