/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EmailDomainDNSRecordType the model 'EmailDomainDNSRecordType'
type EmailDomainDNSRecordType string

// List of EmailDomainDNSRecordType
const (
	EMAILDOMAINDNSRECORDTYPE_CNAME EmailDomainDNSRecordType = "CNAME"
	EMAILDOMAINDNSRECORDTYPE_TXT   EmailDomainDNSRecordType = "TXT"
)

// All allowed values of EmailDomainDNSRecordType enum
var AllowedEmailDomainDNSRecordTypeEnumValues = []EmailDomainDNSRecordType{
	"CNAME",
	"TXT",
}

func (v *EmailDomainDNSRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailDomainDNSRecordType(value)
	for _, existing := range AllowedEmailDomainDNSRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailDomainDNSRecordType", value)
}

// NewEmailDomainDNSRecordTypeFromValue returns a pointer to a valid EmailDomainDNSRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailDomainDNSRecordTypeFromValue(v string) (*EmailDomainDNSRecordType, error) {
	ev := EmailDomainDNSRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailDomainDNSRecordType: valid values are %v", v, AllowedEmailDomainDNSRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailDomainDNSRecordType) IsValid() bool {
	for _, existing := range AllowedEmailDomainDNSRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmailDomainDNSRecordType value
func (v EmailDomainDNSRecordType) Ptr() *EmailDomainDNSRecordType {
	return &v
}

type NullableEmailDomainDNSRecordType struct {
	value *EmailDomainDNSRecordType
	isSet bool
}

func (v NullableEmailDomainDNSRecordType) Get() *EmailDomainDNSRecordType {
	return v.value
}

func (v *NullableEmailDomainDNSRecordType) Set(val *EmailDomainDNSRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailDomainDNSRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailDomainDNSRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailDomainDNSRecordType(val *EmailDomainDNSRecordType) *NullableEmailDomainDNSRecordType {
	return &NullableEmailDomainDNSRecordType{value: val, isSet: true}
}

func (v NullableEmailDomainDNSRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailDomainDNSRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
