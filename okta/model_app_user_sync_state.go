/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AppUserSyncState The synchronization state for the App User. The App User's `syncState` depends on whether the `PROFILE_MASTERING` feature is enabled for the app.  > **Note:** User provisioning currently must be configured through the Admin Console.
type AppUserSyncState string

// List of AppUserSyncState
const (
	APPUSERSYNCSTATE_DISABLED     AppUserSyncState = "DISABLED"
	APPUSERSYNCSTATE_ERROR        AppUserSyncState = "ERROR"
	APPUSERSYNCSTATE_OUT_OF_SYNC  AppUserSyncState = "OUT_OF_SYNC"
	APPUSERSYNCSTATE_SYNCHRONIZED AppUserSyncState = "SYNCHRONIZED"
	APPUSERSYNCSTATE_SYNCING      AppUserSyncState = "SYNCING"
)

// All allowed values of AppUserSyncState enum
var AllowedAppUserSyncStateEnumValues = []AppUserSyncState{
	"DISABLED",
	"ERROR",
	"OUT_OF_SYNC",
	"SYNCHRONIZED",
	"SYNCING",
}

func (v *AppUserSyncState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppUserSyncState(value)
	for _, existing := range AllowedAppUserSyncStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppUserSyncState", value)
}

// NewAppUserSyncStateFromValue returns a pointer to a valid AppUserSyncState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppUserSyncStateFromValue(v string) (*AppUserSyncState, error) {
	ev := AppUserSyncState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppUserSyncState: valid values are %v", v, AllowedAppUserSyncStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppUserSyncState) IsValid() bool {
	for _, existing := range AllowedAppUserSyncStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppUserSyncState value
func (v AppUserSyncState) Ptr() *AppUserSyncState {
	return &v
}

type NullableAppUserSyncState struct {
	value *AppUserSyncState
	isSet bool
}

func (v NullableAppUserSyncState) Get() *AppUserSyncState {
	return v.value
}

func (v *NullableAppUserSyncState) Set(val *AppUserSyncState) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUserSyncState) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUserSyncState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUserSyncState(val *AppUserSyncState) *NullableAppUserSyncState {
	return &NullableAppUserSyncState{value: val, isSet: true}
}

func (v NullableAppUserSyncState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUserSyncState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
