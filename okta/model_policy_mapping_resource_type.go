/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// PolicyMappingResourceType the model 'PolicyMappingResourceType'
type PolicyMappingResourceType string

// List of PolicyMappingResourceType
const (
	POLICYMAPPINGRESOURCETYPE_APP PolicyMappingResourceType = "APP"
)

// All allowed values of PolicyMappingResourceType enum
var AllowedPolicyMappingResourceTypeEnumValues = []PolicyMappingResourceType{
	"APP",
}

func (v *PolicyMappingResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyMappingResourceType(value)
	for _, existing := range AllowedPolicyMappingResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyMappingResourceType", value)
}

// NewPolicyMappingResourceTypeFromValue returns a pointer to a valid PolicyMappingResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyMappingResourceTypeFromValue(v string) (*PolicyMappingResourceType, error) {
	ev := PolicyMappingResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyMappingResourceType: valid values are %v", v, AllowedPolicyMappingResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyMappingResourceType) IsValid() bool {
	for _, existing := range AllowedPolicyMappingResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyMappingResourceType value
func (v PolicyMappingResourceType) Ptr() *PolicyMappingResourceType {
	return &v
}

type NullablePolicyMappingResourceType struct {
	value *PolicyMappingResourceType
	isSet bool
}

func (v NullablePolicyMappingResourceType) Get() *PolicyMappingResourceType {
	return v.value
}

func (v *NullablePolicyMappingResourceType) Set(val *PolicyMappingResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyMappingResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyMappingResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyMappingResourceType(val *PolicyMappingResourceType) *NullablePolicyMappingResourceType {
	return &NullablePolicyMappingResourceType{value: val, isSet: true}
}

func (v NullablePolicyMappingResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyMappingResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
