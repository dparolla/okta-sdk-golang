/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthenticatorMethodAlgorithm The encryption algorithm for this authenticator method
type AuthenticatorMethodAlgorithm string

// List of AuthenticatorMethodAlgorithm
const (
	AUTHENTICATORMETHODALGORITHM_ES256 AuthenticatorMethodAlgorithm = "ES256"
	AUTHENTICATORMETHODALGORITHM_RS256 AuthenticatorMethodAlgorithm = "RS256"
)

// All allowed values of AuthenticatorMethodAlgorithm enum
var AllowedAuthenticatorMethodAlgorithmEnumValues = []AuthenticatorMethodAlgorithm{
	"ES256",
	"RS256",
}

func (v *AuthenticatorMethodAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticatorMethodAlgorithm(value)
	for _, existing := range AllowedAuthenticatorMethodAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticatorMethodAlgorithm", value)
}

// NewAuthenticatorMethodAlgorithmFromValue returns a pointer to a valid AuthenticatorMethodAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticatorMethodAlgorithmFromValue(v string) (*AuthenticatorMethodAlgorithm, error) {
	ev := AuthenticatorMethodAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticatorMethodAlgorithm: valid values are %v", v, AllowedAuthenticatorMethodAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticatorMethodAlgorithm) IsValid() bool {
	for _, existing := range AllowedAuthenticatorMethodAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticatorMethodAlgorithm value
func (v AuthenticatorMethodAlgorithm) Ptr() *AuthenticatorMethodAlgorithm {
	return &v
}

type NullableAuthenticatorMethodAlgorithm struct {
	value *AuthenticatorMethodAlgorithm
	isSet bool
}

func (v NullableAuthenticatorMethodAlgorithm) Get() *AuthenticatorMethodAlgorithm {
	return v.value
}

func (v *NullableAuthenticatorMethodAlgorithm) Set(val *AuthenticatorMethodAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorMethodAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorMethodAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorMethodAlgorithm(val *AuthenticatorMethodAlgorithm) *NullableAuthenticatorMethodAlgorithm {
	return &NullableAuthenticatorMethodAlgorithm{value: val, isSet: true}
}

func (v NullableAuthenticatorMethodAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorMethodAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
