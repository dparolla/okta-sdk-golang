/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// ApplicationFeatureType Identifying name of the feature  | Value | Description   | | --------- | ------------- | | USER_PROVISIONING  | Represents the **To App** provisioning feature setting in the Admin Console |
type ApplicationFeatureType string

// List of ApplicationFeatureType
const (
	APPLICATIONFEATURETYPE_USER_PROVISIONING ApplicationFeatureType = "USER_PROVISIONING"
)

// All allowed values of ApplicationFeatureType enum
var AllowedApplicationFeatureTypeEnumValues = []ApplicationFeatureType{
	"USER_PROVISIONING",
}

func (v *ApplicationFeatureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationFeatureType(value)
	for _, existing := range AllowedApplicationFeatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationFeatureType", value)
}

// NewApplicationFeatureTypeFromValue returns a pointer to a valid ApplicationFeatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationFeatureTypeFromValue(v string) (*ApplicationFeatureType, error) {
	ev := ApplicationFeatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationFeatureType: valid values are %v", v, AllowedApplicationFeatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationFeatureType) IsValid() bool {
	for _, existing := range AllowedApplicationFeatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationFeatureType value
func (v ApplicationFeatureType) Ptr() *ApplicationFeatureType {
	return &v
}

type NullableApplicationFeatureType struct {
	value *ApplicationFeatureType
	isSet bool
}

func (v NullableApplicationFeatureType) Get() *ApplicationFeatureType {
	return v.value
}

func (v *NullableApplicationFeatureType) Set(val *ApplicationFeatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationFeatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationFeatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationFeatureType(val *ApplicationFeatureType) *NullableApplicationFeatureType {
	return &NullableApplicationFeatureType{value: val, isSet: true}
}

func (v NullableApplicationFeatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationFeatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
