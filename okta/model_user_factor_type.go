/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserFactorType Type of Factor
type UserFactorType string

// List of UserFactorType
const (
	USERFACTORTYPE_CALL              UserFactorType = "call"
	USERFACTORTYPE_EMAIL             UserFactorType = "email"
	USERFACTORTYPE_PUSH              UserFactorType = "push"
	USERFACTORTYPE_QUESTION          UserFactorType = "question"
	USERFACTORTYPE_SIGNED_NONCE      UserFactorType = "signed_nonce"
	USERFACTORTYPE_SMS               UserFactorType = "sms"
	USERFACTORTYPE_TOKEN             UserFactorType = "token"
	USERFACTORTYPE_TOKENHARDWARE     UserFactorType = "token:hardware"
	USERFACTORTYPE_TOKENHOTP         UserFactorType = "token:hotp"
	USERFACTORTYPE_TOKENSOFTWARETOTP UserFactorType = "token:software:totp"
	USERFACTORTYPE_U2F               UserFactorType = "u2f"
	USERFACTORTYPE_WEB               UserFactorType = "web"
	USERFACTORTYPE_WEBAUTHN          UserFactorType = "webauthn"
)

// All allowed values of UserFactorType enum
var AllowedUserFactorTypeEnumValues = []UserFactorType{
	"call",
	"email",
	"push",
	"question",
	"signed_nonce",
	"sms",
	"token",
	"token:hardware",
	"token:hotp",
	"token:software:totp",
	"u2f",
	"web",
	"webauthn",
}

func (v *UserFactorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserFactorType(value)
	for _, existing := range AllowedUserFactorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserFactorType", value)
}

// NewUserFactorTypeFromValue returns a pointer to a valid UserFactorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserFactorTypeFromValue(v string) (*UserFactorType, error) {
	ev := UserFactorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserFactorType: valid values are %v", v, AllowedUserFactorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserFactorType) IsValid() bool {
	for _, existing := range AllowedUserFactorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserFactorType value
func (v UserFactorType) Ptr() *UserFactorType {
	return &v
}

type NullableUserFactorType struct {
	value *UserFactorType
	isSet bool
}

func (v NullableUserFactorType) Get() *UserFactorType {
	return v.value
}

func (v *NullableUserFactorType) Set(val *UserFactorType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorType(val *UserFactorType) *NullableUserFactorType {
	return &NullableUserFactorType{value: val, isSet: true}
}

func (v NullableUserFactorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
