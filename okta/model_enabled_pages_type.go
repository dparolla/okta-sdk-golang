/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// EnabledPagesType the model 'EnabledPagesType'
type EnabledPagesType string

// List of enabledPagesType
const (
	ENABLEDPAGESTYPE_SIGN_IN EnabledPagesType = "SIGN_IN"
	ENABLEDPAGESTYPE_SSPR    EnabledPagesType = "SSPR"
	ENABLEDPAGESTYPE_SSR     EnabledPagesType = "SSR"
)

// All allowed values of EnabledPagesType enum
var AllowedEnabledPagesTypeEnumValues = []EnabledPagesType{
	"SIGN_IN",
	"SSPR",
	"SSR",
}

func (v *EnabledPagesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnabledPagesType(value)
	for _, existing := range AllowedEnabledPagesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnabledPagesType", value)
}

// NewEnabledPagesTypeFromValue returns a pointer to a valid EnabledPagesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnabledPagesTypeFromValue(v string) (*EnabledPagesType, error) {
	ev := EnabledPagesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnabledPagesType: valid values are %v", v, AllowedEnabledPagesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnabledPagesType) IsValid() bool {
	for _, existing := range AllowedEnabledPagesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to enabledPagesType value
func (v EnabledPagesType) Ptr() *EnabledPagesType {
	return &v
}

type NullableEnabledPagesType struct {
	value *EnabledPagesType
	isSet bool
}

func (v NullableEnabledPagesType) Get() *EnabledPagesType {
	return v.value
}

func (v *NullableEnabledPagesType) Set(val *EnabledPagesType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledPagesType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledPagesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledPagesType(val *EnabledPagesType) *NullableEnabledPagesType {
	return &NullableEnabledPagesType{value: val, isSet: true}
}

func (v NullableEnabledPagesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledPagesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
