/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// DiskEncryptionTypeDesktop the model 'DiskEncryptionTypeDesktop'
type DiskEncryptionTypeDesktop string

// List of DiskEncryptionTypeDesktop
const (
	DISKENCRYPTIONTYPEDESKTOP_ALL_INTERNAL_VOLUMES DiskEncryptionTypeDesktop = "ALL_INTERNAL_VOLUMES"
)

// All allowed values of DiskEncryptionTypeDesktop enum
var AllowedDiskEncryptionTypeDesktopEnumValues = []DiskEncryptionTypeDesktop{
	"ALL_INTERNAL_VOLUMES",
}

func (v *DiskEncryptionTypeDesktop) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskEncryptionTypeDesktop(value)
	for _, existing := range AllowedDiskEncryptionTypeDesktopEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskEncryptionTypeDesktop", value)
}

// NewDiskEncryptionTypeDesktopFromValue returns a pointer to a valid DiskEncryptionTypeDesktop
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskEncryptionTypeDesktopFromValue(v string) (*DiskEncryptionTypeDesktop, error) {
	ev := DiskEncryptionTypeDesktop(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskEncryptionTypeDesktop: valid values are %v", v, AllowedDiskEncryptionTypeDesktopEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskEncryptionTypeDesktop) IsValid() bool {
	for _, existing := range AllowedDiskEncryptionTypeDesktopEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiskEncryptionTypeDesktop value
func (v DiskEncryptionTypeDesktop) Ptr() *DiskEncryptionTypeDesktop {
	return &v
}

type NullableDiskEncryptionTypeDesktop struct {
	value *DiskEncryptionTypeDesktop
	isSet bool
}

func (v NullableDiskEncryptionTypeDesktop) Get() *DiskEncryptionTypeDesktop {
	return v.value
}

func (v *NullableDiskEncryptionTypeDesktop) Set(val *DiskEncryptionTypeDesktop) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskEncryptionTypeDesktop) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskEncryptionTypeDesktop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskEncryptionTypeDesktop(val *DiskEncryptionTypeDesktop) *NullableDiskEncryptionTypeDesktop {
	return &NullableDiskEncryptionTypeDesktop{value: val, isSet: true}
}

func (v NullableDiskEncryptionTypeDesktop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskEncryptionTypeDesktop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
