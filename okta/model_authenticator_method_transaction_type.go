/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AuthenticatorMethodTransactionType the model 'AuthenticatorMethodTransactionType'
type AuthenticatorMethodTransactionType string

// List of AuthenticatorMethodTransactionType
const (
	AUTHENTICATORMETHODTRANSACTIONTYPE_CIBA  AuthenticatorMethodTransactionType = "CIBA"
	AUTHENTICATORMETHODTRANSACTIONTYPE_LOGIN AuthenticatorMethodTransactionType = "LOGIN"
)

// All allowed values of AuthenticatorMethodTransactionType enum
var AllowedAuthenticatorMethodTransactionTypeEnumValues = []AuthenticatorMethodTransactionType{
	"CIBA",
	"LOGIN",
}

func (v *AuthenticatorMethodTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticatorMethodTransactionType(value)
	for _, existing := range AllowedAuthenticatorMethodTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticatorMethodTransactionType", value)
}

// NewAuthenticatorMethodTransactionTypeFromValue returns a pointer to a valid AuthenticatorMethodTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticatorMethodTransactionTypeFromValue(v string) (*AuthenticatorMethodTransactionType, error) {
	ev := AuthenticatorMethodTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticatorMethodTransactionType: valid values are %v", v, AllowedAuthenticatorMethodTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticatorMethodTransactionType) IsValid() bool {
	for _, existing := range AllowedAuthenticatorMethodTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticatorMethodTransactionType value
func (v AuthenticatorMethodTransactionType) Ptr() *AuthenticatorMethodTransactionType {
	return &v
}

type NullableAuthenticatorMethodTransactionType struct {
	value *AuthenticatorMethodTransactionType
	isSet bool
}

func (v NullableAuthenticatorMethodTransactionType) Get() *AuthenticatorMethodTransactionType {
	return v.value
}

func (v *NullableAuthenticatorMethodTransactionType) Set(val *AuthenticatorMethodTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticatorMethodTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticatorMethodTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticatorMethodTransactionType(val *AuthenticatorMethodTransactionType) *NullableAuthenticatorMethodTransactionType {
	return &NullableAuthenticatorMethodTransactionType{value: val, isSet: true}
}

func (v NullableAuthenticatorMethodTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticatorMethodTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
