/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// AppUserStatus Status of an App User
type AppUserStatus string

// List of AppUserStatus
const (
	APPUSERSTATUS_ACTIVE        AppUserStatus = "ACTIVE"
	APPUSERSTATUS_APPROVED      AppUserStatus = "APPROVED"
	APPUSERSTATUS_DEPROVISIONED AppUserStatus = "DEPROVISIONED"
	APPUSERSTATUS_IMPLICIT      AppUserStatus = "IMPLICIT"
	APPUSERSTATUS_IMPORTED      AppUserStatus = "IMPORTED"
	APPUSERSTATUS_INACTIVE      AppUserStatus = "INACTIVE"
	APPUSERSTATUS_MATCHED       AppUserStatus = "MATCHED"
	APPUSERSTATUS_PENDING       AppUserStatus = "PENDING"
	APPUSERSTATUS_PROVISIONED   AppUserStatus = "PROVISIONED"
	APPUSERSTATUS_REVOKED       AppUserStatus = "REVOKED"
	APPUSERSTATUS_STAGED        AppUserStatus = "STAGED"
	APPUSERSTATUS_SUSPENDED     AppUserStatus = "SUSPENDED"
	APPUSERSTATUS_UNASSIGNED    AppUserStatus = "UNASSIGNED"
)

// All allowed values of AppUserStatus enum
var AllowedAppUserStatusEnumValues = []AppUserStatus{
	"ACTIVE",
	"APPROVED",
	"DEPROVISIONED",
	"IMPLICIT",
	"IMPORTED",
	"INACTIVE",
	"MATCHED",
	"PENDING",
	"PROVISIONED",
	"REVOKED",
	"STAGED",
	"SUSPENDED",
	"UNASSIGNED",
}

func (v *AppUserStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppUserStatus(value)
	for _, existing := range AllowedAppUserStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppUserStatus", value)
}

// NewAppUserStatusFromValue returns a pointer to a valid AppUserStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppUserStatusFromValue(v string) (*AppUserStatus, error) {
	ev := AppUserStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppUserStatus: valid values are %v", v, AllowedAppUserStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppUserStatus) IsValid() bool {
	for _, existing := range AllowedAppUserStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppUserStatus value
func (v AppUserStatus) Ptr() *AppUserStatus {
	return &v
}

type NullableAppUserStatus struct {
	value *AppUserStatus
	isSet bool
}

func (v NullableAppUserStatus) Get() *AppUserStatus {
	return v.value
}

func (v *NullableAppUserStatus) Set(val *AppUserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUserStatus(val *AppUserStatus) *NullableAppUserStatus {
	return &NullableAppUserStatus{value: val, isSet: true}
}

func (v NullableAppUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
