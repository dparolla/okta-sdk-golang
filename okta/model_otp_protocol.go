/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// OtpProtocol the model 'OtpProtocol'
type OtpProtocol string

// List of OtpProtocol
const (
	OTPPROTOCOL_SYMANTEC OtpProtocol = "SYMANTEC"
	OTPPROTOCOL_TOTP     OtpProtocol = "TOTP"
	OTPPROTOCOL_YUBICO   OtpProtocol = "YUBICO"
)

// All allowed values of OtpProtocol enum
var AllowedOtpProtocolEnumValues = []OtpProtocol{
	"SYMANTEC",
	"TOTP",
	"YUBICO",
}

func (v *OtpProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OtpProtocol(value)
	for _, existing := range AllowedOtpProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OtpProtocol", value)
}

// NewOtpProtocolFromValue returns a pointer to a valid OtpProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOtpProtocolFromValue(v string) (*OtpProtocol, error) {
	ev := OtpProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OtpProtocol: valid values are %v", v, AllowedOtpProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OtpProtocol) IsValid() bool {
	for _, existing := range AllowedOtpProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OtpProtocol value
func (v OtpProtocol) Ptr() *OtpProtocol {
	return &v
}

type NullableOtpProtocol struct {
	value *OtpProtocol
	isSet bool
}

func (v NullableOtpProtocol) Get() *OtpProtocol {
	return v.value
}

func (v *NullableOtpProtocol) Set(val *OtpProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableOtpProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableOtpProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtpProtocol(val *OtpProtocol) *NullableOtpProtocol {
	return &NullableOtpProtocol{value: val, isSet: true}
}

func (v NullableOtpProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtpProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
