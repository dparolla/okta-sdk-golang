/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// UserFactorStatus Status of the Factor
type UserFactorStatus string

// List of UserFactorStatus
const (
	USERFACTORSTATUS_ACTIVE             UserFactorStatus = "ACTIVE"
	USERFACTORSTATUS_DISABLED           UserFactorStatus = "DISABLED"
	USERFACTORSTATUS_ENROLLED           UserFactorStatus = "ENROLLED"
	USERFACTORSTATUS_EXPIRED            UserFactorStatus = "EXPIRED"
	USERFACTORSTATUS_INACTIVE           UserFactorStatus = "INACTIVE"
	USERFACTORSTATUS_NOT_SETUP          UserFactorStatus = "NOT_SETUP"
	USERFACTORSTATUS_PENDING_ACTIVATION UserFactorStatus = "PENDING_ACTIVATION"
)

// All allowed values of UserFactorStatus enum
var AllowedUserFactorStatusEnumValues = []UserFactorStatus{
	"ACTIVE",
	"DISABLED",
	"ENROLLED",
	"EXPIRED",
	"INACTIVE",
	"NOT_SETUP",
	"PENDING_ACTIVATION",
}

func (v *UserFactorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserFactorStatus(value)
	for _, existing := range AllowedUserFactorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserFactorStatus", value)
}

// NewUserFactorStatusFromValue returns a pointer to a valid UserFactorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserFactorStatusFromValue(v string) (*UserFactorStatus, error) {
	ev := UserFactorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserFactorStatus: valid values are %v", v, AllowedUserFactorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserFactorStatus) IsValid() bool {
	for _, existing := range AllowedUserFactorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserFactorStatus value
func (v UserFactorStatus) Ptr() *UserFactorStatus {
	return &v
}

type NullableUserFactorStatus struct {
	value *UserFactorStatus
	isSet bool
}

func (v NullableUserFactorStatus) Get() *UserFactorStatus {
	return v.value
}

func (v *NullableUserFactorStatus) Set(val *UserFactorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFactorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFactorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFactorStatus(val *UserFactorStatus) *NullableUserFactorStatus {
	return &NullableUserFactorStatus{value: val, isSet: true}
}

func (v NullableUserFactorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFactorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
