/*
Okta Admin Management

Allows customers to easily access the Okta Management APIs

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 5.1.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
	"fmt"
)

// WebAuthnAttachment the model 'WebAuthnAttachment'
type WebAuthnAttachment string

// List of WebAuthnAttachment
const (
	WEBAUTHNATTACHMENT_ANY      WebAuthnAttachment = "ANY"
	WEBAUTHNATTACHMENT_BUILT_IN WebAuthnAttachment = "BUILT_IN"
	WEBAUTHNATTACHMENT_ROAMING  WebAuthnAttachment = "ROAMING"
)

// All allowed values of WebAuthnAttachment enum
var AllowedWebAuthnAttachmentEnumValues = []WebAuthnAttachment{
	"ANY",
	"BUILT_IN",
	"ROAMING",
}

func (v *WebAuthnAttachment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebAuthnAttachment(value)
	for _, existing := range AllowedWebAuthnAttachmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebAuthnAttachment", value)
}

// NewWebAuthnAttachmentFromValue returns a pointer to a valid WebAuthnAttachment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebAuthnAttachmentFromValue(v string) (*WebAuthnAttachment, error) {
	ev := WebAuthnAttachment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebAuthnAttachment: valid values are %v", v, AllowedWebAuthnAttachmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebAuthnAttachment) IsValid() bool {
	for _, existing := range AllowedWebAuthnAttachmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebAuthnAttachment value
func (v WebAuthnAttachment) Ptr() *WebAuthnAttachment {
	return &v
}

type NullableWebAuthnAttachment struct {
	value *WebAuthnAttachment
	isSet bool
}

func (v NullableWebAuthnAttachment) Get() *WebAuthnAttachment {
	return v.value
}

func (v *NullableWebAuthnAttachment) Set(val *WebAuthnAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableWebAuthnAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableWebAuthnAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebAuthnAttachment(val *WebAuthnAttachment) *NullableWebAuthnAttachment {
	return &NullableWebAuthnAttachment{value: val, isSet: true}
}

func (v NullableWebAuthnAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebAuthnAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
